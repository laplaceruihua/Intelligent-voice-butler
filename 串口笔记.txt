串口 备课

通讯接口
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————
1.通讯的意义  
	需要多个单片机配合完成一件事，
	单片机之间需要进行数据传输
	
——————————————————————————————————————————————
2.通信方式  (波特率)

并行：由多根数据线同时进行数据传输
	优点：传输速度快
	缺点：通讯距离近
串行：只有一根数据线进行移位数据传输
	优点：传输速度慢
	缺点：通讯距离远
	
	时钟： 1）同步通讯：使用相同的时钟频率进行数据传输
				一般有一根时钟线进行时钟同步
		   2）异步通讯：双方使用各自的时钟评率进行数据传输
				使用波特率来同步传输数据
波特率：一秒传输数据的位数
char ch=5;
8位      115200 
传输一位：1/115200 s  
传输ch  需要 8*（1/115200）  8/115200S
串行通讯：
	单工：  只能作为接收器或者发送器 （广播、收音机）
	半双工：既能作为接收器又能发送器，
			但是同一时间只能作为接收器或者发送器 （对讲机）
			
	全双工：同一时间既能作为接收器又能作为发送器 （手机）
	
STM32F103R8T6 由3个串口
——————————————————————————————————————————————
3.硬件连接
RX  -------   TX
TX  ———————   RX
GND ———————   GND

串行 异步  全双工
——————————————————————————————————————————————
4.RS232协议（一起商议 保证数据的正确性）

	开始位  数据位  奇偶校验位  停止位  
	  1       5-8       1/0      1/1.5/2
空闲状态： 高电平
空闲状态： 低电平
  传输协议理解
  协议只需要在初始化的时候进行配置，
  置好之后USART外设就会按照这个协议传输数据

 通过寄存器进行配置：
 
 float USARTDIV;
 u32 DIV_M ,DIV_F;
 
 波特率 = fck  /  16*( USARTDIV )
 USARTDIV = fck  /  16*( 波特率 )
 
 

 USARTDIV=72 * 1000000  /  16*( 115200 );
 DIV_M=(u32)USARTDIV;
 DIV_F= (u32)((USARTDIV-DIV_M)*16);   //0.1110 ->  1110
 USART->BRR = (DIV_M <<4) | DIV_F;

——————————————————————————————————————————————
5.介绍UART的相关寄存器 
USART->SR   状态寄存器  判断串口是否接收到数据，
						是否接收到数据
USART->DR    数据寄存器  数据存储的位置  

USART->CR1   使能串口 配置字长  奇偶校验  
				使能接收器和发送器
USART->CR2    配置停止位   1个停止位

USART->BRR    配置波特率  
——————————————————————————————————————————————
6.串口的配置流程
1）看原理图
	PA9  ----  TX -----》 推挽输出
	PA10  ---- RX -----》 浮空输入
2）开时钟 （使能GPIOA USART1）
3）配置IO口的工作模式
	PA9  ----  TX -----》 推挽输出
	PA10  ---- RX -----》 浮空输入
4）配置串口的寄存器

——————————————————————————————————————————————
7.串口助手的使用与回显函数的实现
void Usart_echo(void)
{
	char ch;
	//等待接收到数据
	while( (USART1->SR & (0x1<<5)) == 0);
	ch = USART1->DR;
	//等待上一个数据发送完成
	while( (USART1->SR & (0x1<<7)) == 0);
	USART1->DR=ch;
}


——————————————————————————————————————————————
8.printf输出重定向

int fputc(int ch,FILE *p)
{
	//等待数据寄存器为空
	while((USART1->SR &(1<<7)) == 0);
	USART1->DR = ch;
	return ch;
}


——————————————————————————————————————————————
9.通过上位机控制单片机(作业)










